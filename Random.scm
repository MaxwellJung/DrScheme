(load "/Applications/PLT/scheme/simply.scm")

(define (shiftletter letter)
  (cond ((equal? letter 'a) 'b)
        ((equal? letter 'b) 'c)
        ((equal? letter 'c) 'd)
        ((equal? letter 'd) 'e)
        ((equal? letter 'e) 'f)
        ((equal? letter 'f) 'g)
        ((equal? letter 'g) 'h)
        ((equal? letter 'h) 'i)
        ((equal? letter 'i) 'j)
        ((equal? letter 'j) 'k)
        ((equal? letter 'k) 'l)
        ((equal? letter 'l) 'm)
        ((equal? letter 'm) 'n)
        ((equal? letter 'n) 'o)
        ((equal? letter 'o) 'p)
        ((equal? letter 'p) 'q)
        ((equal? letter 'q) 'r)
        ((equal? letter 'r) 's)
        ((equal? letter 's) 't)
        ((equal? letter 't) 'u)
        ((equal? letter 'u) 'v)
        ((equal? letter 'v) 'w)
        ((equal? letter 'w) 'x)
        ((equal? letter 'x) 'y)
        ((equal? letter 'y) 'z)
        ((equal? letter 'z) 'a)
        (else 'error)))

(define (encrypt x)
  (every (lambda (y) (every shiftletter y)) x))

(define (randomconsonant)
  (let ((consonant (random 21)))
    (cond ((equal? consonant 0) 'b)
          ((equal? consonant 1) 'c)
          ((equal? consonant 2) 'd)
          ((equal? consonant 3) 'c)
          ((equal? consonant 4) 'g)
          ((equal? consonant 5) 'h)
          ((equal? consonant 6) 'j)
          ((equal? consonant 7) 'k)
          ((equal? consonant 8) 'l)
          ((equal? consonant 9) 'm)
          ((equal? consonant 10) 'n)
          ((equal? consonant 11) 'p)
          ((equal? consonant 12) 'q)
          ((equal? consonant 13) 'r)
          ((equal? consonant 14) 's)
          ((equal? consonant 15) 't)
          ((equal? consonant 16) 'v)
          ((equal? consonant 17) 'w)
          ((equal? consonant 18) 'x)
          ((equal? consonant 19) 'y)
          ((equal? consonant 20) 'z))))

(define (randomvowel)
  (let ((vowel (random 5)))
    (cond ((equal? vowel 0) 'a)
          ((equal? vowel 1) 'e)
          ((equal? vowel 2) 'i)
          ((equal? vowel 3) 'o)
          ((equal? vowel 4) 'u))))

(define (randomword)
  (let ((n (random 10)))
    (let ((equation (- (* 2 n) 1)))
      (let ((cut (if (<= equation 0) 0 equation)))
        ((repeated bl (- 21 cut)) (word (randomconsonant) (randomvowel) (randomconsonant) (randomvowel) (randomconsonant) (randomvowel) (randomconsonant) (randomvowel) (randomconsonant) (randomvowel) (randomconsonant) (randomvowel) (randomconsonant) (randomvowel) (randomconsonant) (randomvowel) (randomconsonant) (randomvowel) (randomconsonant) (randomvowel) (randomconsonant)))))))

(define (randomsentence)
  (se (randomword) (randomword) (randomword) (randomword) (randomword) (randomword) (word (randomword) ".")))

(define (numfirst num input)
  (cond ((< (count input) num) input)
        (else
         (cond ((= num 1) (first input))
               (else (cond ((word? input) (word (numfirst (- num 1) input) (item num input)))
                           ((sentence? input) (se (numfirst (- num 1) input) (item num input)))))))))

(define (numlast num input)
  (cond ((< (count input) num) input)
        (else
         (cond ((= num 1) (last input))
               (else (cond ((word? input) (word (item (- (+ (count input) 1) num) input) (numlast (- num 1) input)))
                           ((sentence? input) (se (item (- (+ (count input) 1) num) input) (numlast (- num 1) input)))))))))

(define (back x y)
  (cond ((empty? y) '())
        ((equal? x (numfirst (count x) y)) ((repeated bf (count x)) y))
        (else (back x (bf y)))))

(define (front x y)
  (cond ((empty? y) '())
        ((equal? x (numlast (count x) y)) ((repeated bl (count x)) y))
        (else (front x (bl y)))))

(define (coefficient term)
  (let ((number (front 'x term)))
    (cond ((empty? number) 1)
          ((equal? number '-) -1)
          ((number? number) number))))

(define (degree term)
  (let ((number (back '^ term)))
    (cond ((number? term) 0)
          ((empty? number) 1)
          ((number? number) number))))

(define (new-coefficient wd)
  (* (degree wd) (coefficient wd)))

(define (new-degree wd)
  (- (degree wd) 1))

(define (derivative-polynomial se)
  (every (lambda (wd) (word (new-coefficient wd) 'x^ (new-degree wd))) se))

(define (vowel? letter)
  (member? letter 'aeiou))

(define (vowel-in-front wd)
  (word (keep vowel? wd) (keep (lambda (letter) (not (vowel? letter))) wd)))

(define (firstvowel sent)
  (every vowel-in-front sent))

(define (double-letter ltr wrd)
  (accumulate word (every (lambda (x) (if (equal? x ltr) (word x x) x)) wrd)))

(define (every1 one-arg-func arg)
  (if (empty? arg)
      '()
      (se (one-arg-func (first arg)) (every1 one-arg-func (bf arg)))))

(define (keep1 predicate arg)
  (let ((kept (every (lambda (x) (if (predicate x) x '())) arg)))
    (cond ((word? arg) (accumulate word kept))
          ((sentence? arg) kept)
          (else 'invalid))))

(define (replication DNA-strand)
  (accumulate word (every (lambda (base-pair) (cond ((equal? base-pair '3) '5)
                                                    ((equal? base-pair '5) '3)
                                                    ((equal? base-pair 'a) 't)
                                                    ((equal? base-pair 't) 'a)
                                                    ((equal? base-pair 'c) 'g)
                                                    ((equal? base-pair 'g) 'c)
                                                    (else 'error))) DNA-strand)))

(define (transcription DNA-strand)
  (accumulate word (every (lambda (base-pair) (cond ((equal? base-pair '3) '5)
                                                    ((equal? base-pair '5) '3)
                                                    ((equal? base-pair 'a) 'u)
                                                    ((equal? base-pair 't) 'a)
                                                    ((equal? base-pair 'c) 'g)
                                                    ((equal? base-pair 'g) 'c)
                                                    (else 'error))) DNA-strand)))

(define (first-three mRNA)
  (word (item 1 mRNA) (item 2 mRNA) (item 3 mRNA)))

(define (amino-acid codon)
  (let ((first-base (first codon)) (second-base (first (bf codon))) (third-base (first (bf (bf codon)))))
    (cond ((equal? first-base 'a) (cond ((equal? second-base 'a) (cond ((member? third-base 'ag) 'Lysine)
                                                                       ((member? third-base 'cu) 'Asparagine)))
                                        ((equal? second-base 'u) (cond ((member? third-base 'acu) 'Isoleucine)
                                                                       ((equal? third-base 'g) 'Methionine)))
                                        ((equal? second-base 'c) 'Threonine)
                                        ((equal? second-base 'g) (cond ((member? third-base 'ga) 'Arginine)
                                                                       ((member? third-base 'cu) 'Serine)))))
          ((equal? first-base 'u) (cond ((equal? second-base 'a) (cond ((member? third-base 'ag) 'Stop)
                                                                       ((member? third-base 'uc) 'Tyrosine)))
                                        ((equal? second-base 'u) (cond ((member? third-base 'ag) 'Leucine)
                                                                       ((member? third-base 'uc) 'Phenylalanine)))
                                        ((equal? second-base 'c) 'Serine)
                                        ((equal? second-base 'g) (cond ((member? third-base 'uc) 'Cysteine)
                                                                       ((equal? third-base 'a) 'Stop)
                                                                       ((equal? third-base 'g) 'Tryptophan)))))
          ((equal? first-base 'c) (cond ((equal? second-base 'a) (cond ((member? third-base 'uc) 'Histidine)
                                                                       ((member? third-base 'ag) 'Glutamine)))
                                        ((equal? second-base 'u) 'Leucine)
                                        ((equal? second-base 'c) 'Proline)
                                        ((equal? second-base 'g) 'Arginine)))
          ((equal? first-base 'g) (cond ((equal? second-base 'a) (cond ((member? third-base 'uc) 'Aspartic-acid)
                                                                       ((member? third-base 'ag) 'Glutamic-acid)))
                                        ((equal? second-base 'u) 'Valine)
                                        ((equal? second-base 'c) 'Alanine)
                                        ((equal? second-base 'g) 'Glycine))))))

(define (translation mRNA)
  (if (or (< (count mRNA) 3) (equal? (amino-acid (first-three mRNA)) 'Stop))
      '()
      (let ((codon (first-three mRNA)))
        (se (amino-acid codon) (translation ((repeated bf 3) mRNA))))))

(define (protein-synthesis DNA-strand)
  (translation (transcription DNA-strand)))

(define (different? set)
  (cond ((equal? (count set) 1) #t)
        (else (and (not (member? (first set) (bf set))) (different? (bf set))))))

(define (square num)
  (* num num))

(define (distance p1 p2)
  (sqrt (+ (square (- (car p1) (car p2))) (square (- (cadr p1) (cadr p2))))))

(define pi (/ 104348 33215.))