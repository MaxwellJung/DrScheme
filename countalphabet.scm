(load "/Program Files (x86)/PLT/scheme/simply.scm")

(define (count-all-alp sent)
  (let ((wd (accumulate word sent)) (exclude (lambda (alpnum) (if (equal? 0 (bf alpnum)) '() alpnum))))
    (every exclude
    (se (word 'a (appearances 'a wd))
        (word 'b (appearances 'b wd))
        (word 'c (appearances 'c wd))
        (word 'd (appearances 'd wd))
        (word 'e (appearances 'e wd))
        (word 'f (appearances 'f wd))
        (word 'g (appearances 'g wd))
        (word 'h (appearances 'h wd))
        (word 'i (appearances 'i wd))
        (word 'j (appearances 'j wd))
        (word 'k (appearances 'k wd))
        (word 'l (appearances 'l wd))
        (word 'm (appearances 'm wd))
        (word 'n (appearances 'n wd))
        (word 'o (appearances 'o wd))
        (word 'p (appearances 'p wd))
        (word 'q (appearances 'q wd))
        (word 'r (appearances 'r wd))
        (word 's (appearances 's wd))
        (word 't (appearances 't wd))
        (word 'u (appearances 'u wd))
        (word 'v (appearances 'v wd))
        (word 'w (appearances 'w wd))
        (word 'x (appearances 'x wd))
        (word 'y (appearances 'y wd))
        (word 'z (appearances 'z wd))))))

(define (maximum sent)
  (cond ((= (length sent) 1) (car sent))
        ((<= (car sent) (cadr sent)) (maximum (cdr sent)))
        ((>= (car sent) (cadr sent)) (maximum (cons (car sent) (cddr sent))))))

(define (minimum sent)
  (cond ((= (length sent) 1) (car sent))
        ((>= (car sent) (cadr sent)) (minimum (cdr sent)))
        ((<= (car sent) (cadr sent)) (minimum (cons (car sent) (cddr sent))))))

(define (max-alp sent)
  (every (lambda (x) (if (= (bf x) (maximum (every bf (count-all-alp sent))))
                         x
                         '())) (count-all-alp sent)))

(define (min-alp sent)
  (every (lambda (x) (if (= (bf x) (minimum (every bf (count-all-alp sent))))
                         x
                         '())) (count-all-alp sent)))